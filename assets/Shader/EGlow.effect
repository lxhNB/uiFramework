// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        # 自定义参数
        glowColor: { 
          value: [1.0, 1.0, 0.0, 1.0], 
          editor: { 
            type: color,
            tooltip: "发光颜色（RGBA）"
          } 
        } 
        glowRange: {
          value: 0.1,
          editor: {
            tooltip: "内发光范围, 像素为单位",
          }
        }
        glowType: {
          value: 0.1,
          editor: {
            tooltip: "类型",
            range: [0.0, 1.0]
          }
        }
        glowThreshold: {
          value: 0.1,
          editor: {
            tooltip: "发光阈值（只有超过这个透明度的点才会发光）",
            range: [0.0, 1.0]
          }
        }
        textureSize: {
          value: [0.0, 0.0], 
          editor: {
            tooltip: "图片宽高",
          }
        }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  // 定义向周边搜索的圈数
  #define range 6.0

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform glow {
    
    // 发光颜色
    vec4 glowColor;
    // 图片大小
    vec2 textureSize;
    // 发光范围, 像素为单位
    float glowRange;
    // 大于0.6则为外发光, 大于0.3为内发光, 其余为默认
    float glowType;

    float glowThreshold;
  };

    vec4 getTextureColor(sampler2D texture, vec2 v_uv0) {
        if (v_uv0.x > 1.0 || v_uv0.x < 0.0 || v_uv0.y > 1.0 || v_uv0.y < 0.0) {
            return vec4(0.0, 0.0, 0.0, 0.0);
        }
        return texture(texture, v_uv0);
    }

    // 获取当前范围的平均透明度, collectOut是否采集透明区域
    float getRangeAlphaRect(bool collectOut) {
        if (glowRange <= 0.0) {
          return 0.0;
        }

        vec4 srcColor = getTextureColor(texture, v_uv0);
        if(!collectOut) {   // 不采集透明区域
          if(srcColor.a < glowThreshold) return srcColor.a;
        }
        // 每一圈的对应的步长, 百分比
        float stepX = (glowRange / textureSize.x) / range;
        float stepY = (glowRange / textureSize.y) / range;

        // 取样周边一定范围透明度
        float totalAlpha = 0.0;
        for (float x = -range; x <= range; x++) {
            for (float y = -range; y <= range; y++) {
              float a = getTextureColor(texture, v_uv0 + vec2(x * stepX, y * stepY)).a;
              if(a < glowThreshold) a = 0.0;
                totalAlpha += a;
            }
        }
        return totalAlpha / pow((range + range + 1.0), 2.0);
    }

    void main () {
        vec4 o = vec4(1, 1, 1, 1);

        #if USE_TEXTURE
            CCTexture(texture, v_uv0, o);
        #endif

        o *= v_color;

        if(glowType >= 0.6) {
            // 外发光则 alpha越小 光亮越弱
            float alpha = getRangeAlphaRect(true);
            if(alpha <= 0.0) {		// 属于较远的区域, 放弃
                discard;
            }
            if(o.a < glowThreshold) {
              alpha = -1.0 * pow((alpha - 1.0), 4.0) + 1.0;
              o = glowColor * alpha + o * (1.0 - alpha);
            }else{    // 原图为主
              o = o * o.a + glowColor * (1.0 - o.a);
            }
        }else if(glowType >= 0.3) {
            // 内发光
            float alpha = getRangeAlphaRect(false);
            if(alpha > glowThreshold) {
              alpha = 1.0 - alpha;
              alpha = -1.0 * pow((alpha - 1.0), 4.0) + 1.0;
              o = glowColor * alpha + o * (1.0 - alpha);
            }
        }

        gl_FragColor = o;
    }
}%
